```
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Main View</title>
    
    <!-- Include D3.js library -->
    <script src="https://d3js.org/d3.v7.min.js"></script>
    
    <!-- Include custom script file -->
    <script src="/script.js" defer></script>
    
    <style>
      /* Styling for the squares */
      .square { stroke: black; stroke-width: 2px; cursor: pointer; }
      .root { fill: lightblue; }
      .branch { fill: lightgray; }
      .leaf { fill: lightgreen; }
      .fruit { fill: lightcoral; opacity: 0.3; }
      .fruit:hover { opacity: 1; }
      
      /* Basic styling for body and svg */
      body, html { margin: 0; padding: 0; width: 100%; height: 100%; display: flex; justify-content: center; align-items: center; overflow: hidden; }
      svg { width: 90vw; height: 90vh; display: block; margin: auto; }
      
      /* Modal styling */
      .modal { display: none; position: fixed; z-index: 1; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background-color: rgba(0, 0, 0, 0.4); justify-content: center; align-items: center; }
      .modal-content { background-color: #fefefe; margin: auto; padding: 20px; border: 1px solid #888; width: 80%; max-width: 400px; text-align: center; }
      .close { color: #aaa; float: right; font-size: 28px; font-weight: bold; }
      .close:hover, .close:focus { color: black; text-decoration: none; cursor: pointer; }
      .modal-button { padding: 10px 20px; margin: 10px; font-size: 16px; cursor: pointer; }
    </style>
</head>
<body>
    <svg id="chart"></svg>
    
    <!-- The Modal -->
    <div id="myModal" class="modal">
      <div class="modal-content">
        <span class="close">&times;</span>
        <p id="modal-text">Edit Label:</p>
        <input type="text" id="label-input" />
        <button id="save-label" class="modal-button">Save</button>
        <button id="cancel" class="modal-button">Cancel</button>
        <br />
        <button id="view-scale" class="modal-button">Scaled View</button>
        <button id="view-scope" class="modal-button">Scoped View</button>
        <button id="include" class="modal-button">Include</button>
      </div>
    </div>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        // Set SVG dimensions and center points
        const svg = d3.select("#chart");
        const width = window.innerWidth * 0.9;
        const height = window.innerHeight * 0.9;
        const centerX = width / 2;
        const centerY = height / 2;
        const centerSquareSize = Math.min(width, height) / 2;
        const smallSquareSize = centerSquareSize / 2;
        const smallestSquareSize = smallSquareSize / 2;
        const tinySquareSize = smallestSquareSize / 2;

        svg.attr("viewBox", `0 0 ${width} ${height}`).attr("preserveAspectRatio", "xMidYMid meet");

        // Modal elements
        const modal = document.getElementById("myModal");
        const modalText = document.getElementById("modal-text");
        const btnClose = document.getElementsByClassName("close")[0];
        const btnSaveLabel = document.getElementById("save-label");
        const btnViewScale = document.getElementById("view-scale");
        const btnViewScope = document.getElementById("view-scope");
        const btnInclude = document.getElementById("include");
        const btnCancel = document.getElementById("cancel");
        const labelInput = document.getElementById("label-input");

        // Variables for current modal state
        let currentUrl = "";
        let currentTextElement = null;
        let currentSquareClass = "";

        // Function to open the modal
        function openModal(url, className, textElement) {
          modal.style.display = "flex";
          currentUrl = url;
          currentTextElement = textElement;
          currentSquareClass = className;
          labelInput.value = textElement.textContent;
          modalText.textContent = `Square ${className} clicked! Edit Label:`;
        }

        // Event listener to close modal when the close button is clicked
        btnClose.onclick = function () { modal.style.display = "none"; };

        // Event listener to close modal when clicking outside of the modal
        window.onclick = function (event) { if (event.target === modal) modal.style.display = "none"; };

        // Event listener to save the label when save button is clicked
        btnSaveLabel.onclick = function () { if (currentTextElement) currentTextElement.textContent = labelInput.value; modal.style.display = "none"; };

        // Event listeners for modal action buttons
        btnViewScale.onclick = function () { window.location.href = "scaled_view.html"; };
        btnViewScope.onclick = function () { window.location.href = "scoped_view.html"; };
        btnInclude.onclick = function () { window.location.href = `included_build.html?class=${currentSquareClass}&parent=${currentTextElement.textContent}`; };
        btnCancel.onclick = function () { modal.style.display = "none"; };

        // Debounce function to prevent frequent clicks
        function debounce(func, wait) {
          let timeout;
          return function (...args) {
            clearTimeout(timeout);
            timeout = setTimeout(() => func.apply(this, args), wait);
          };
        }

        // Function to draw a square and add click event listener
        function drawSquare(x, y, size, color, className, depth, parentText) {
          const rect = svg.append("rect")
            .attr("x", x - size / 2)
            .attr("y", y - size / 2)
            .attr("width", size)
            .attr("height", size)
            .attr("class", `square ${className}`)
            .attr("fill", color)
            .on("click", debounce(function () {
              const url = `pages/scoped_page_${parentText}_${depth}_${className}.html`;
              const textElement = d3.select(this.nextSibling);
              openModal(url, className, textElement.node());
            }, 200));

          const text = svg.append("text")
            .attr("x", x)
            .attr("y", y)
            .attr("dy", "0.35em")
            .attr("text-anchor", "middle")
            .attr("font-size", size / 5)
            .attr("pointer-events", "none")
            .text(className);
        }

        // Draw the root square at the center
        drawSquare(centerX, centerY, centerSquareSize, "lightblue", "root", 1, "Center");

        // Define coordinates for small squares around the root
        const corners = [
          [centerX - centerSquareSize / 2, centerY - centerSquareSize / 2],
          [centerX + centerSquareSize / 2, centerY - centerSquareSize / 2],
          [centerX - centerSquareSize / 2, centerY + centerSquareSize / 2],
          [centerX + centerSquareSize / 2, centerY + centerSquareSize / 2],
        ];

        // Recursive function to draw squares in a hierarchy
        function drawSquares(corners, size, depth, className, parentText) {
          if (depth > 3) return; // Limit the depth for better performance

          const colors = { root: "lightblue", branch: "lightgray", leaf: "lightgreen", fruit: "lightcoral" };

          corners.forEach(([x, y], index) => {
            let currentClassName;
            if (depth === 1) currentClassName = "branch";
            else if (depth === 2) currentClassName = "leaf";
            else if (depth === 3) currentClassName = "fruit";

            drawSquare(x, y, size, colors[currentClassName] || "", currentClassName || "", depth, parentText);

            if (size > tinySquareSize) {
              const nextSize = size / 2;
              const nextCorners = [
                [x - size / 2, y - size / 2],
                [x + size / 2, y - size / 2],
                [x - size / 2, y + size / 2],
                [x + size / 2, y + size / 2],
              ];

              requestAnimationFrame(() => {
                drawSquares(nextCorners, nextSize, depth + 1, currentClassName || "", `${parentText}_${index + 1}`);
              });
            }
          });
        }

        // Start the recursive drawing
        drawSquares(corners, smallSquareSize, 1, "root", "Root");

        // Function to adjust fruit opacity when a leaf is hovered
        function adjustFruitOpacityOnLeafHover() {
          const leafSquares = document.querySelectorAll('.leaf');
          const fruitSquares = document.querySelectorAll('.fruit');

          leafSquares.forEach(leaf => {
            leaf.addEventListener('mouseover', () => {
              fruitSquares.forEach(fruit => {
                fruit.style.opacity = '1';
              });
            });

            leaf.addEventListener('mouseout', () => {
              fruitSquares.forEach(fruit => {
                fruit.style.opacity = '0.3';
              });
            });
          });
        }

        // Function to load data from the server
        async function loadData() {
          try {
            const response = await fetch('https://squar-bd2bb2372583.herokuapp.com/squares');
            if (!response.ok) {
              throw new Error('Network response was not ok');
            }
            const data = await response.json();

            if (!data || data.length === 0) {
              console.error("No data received from the server.");
              return;
            }

            const squareData = data[0]; // Assuming the first object is the root square
            console.log("Data loaded:", squareData);

            initializeVisualization(squareData); // Initialize visualization with the fetched data
          } catch (error) {
            console.error('Error fetching data:', error);
          }
        }

        // Function to save data to the server
        async function saveData() {
          if (squareData) {
            try {
              const response = await fetch('https://squar-bd2bb2372583.herokuapp.com/squares', {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(squareData)
              });
              if (!response.ok) {
                throw new Error('Network response was not ok');
              }
              const data = await response.json();
              console.log('Data saved:', data);
            } catch (error) {
              console.error("Error saving data:", error);
            }
          } else {
            console.error("No data to save");
          }
        }

        window.addEventListener("beforeunload", saveData);
        window.addEventListener("load", loadData);

        // Adjust fruit opacity on leaf hover
        adjustFruitOpacityOnLeafHover();
      });
    </script>
</body>
</html>
```
>> 2 included_build.html

```
<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Included Build</title>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
        .square {
            stroke: black;
            stroke-width: 2px;
            cursor: pointer;
        }

        .root {
            fill: lightblue;
        }

        .branch {
            fill: lightgray;
        }

        .leaf {
            fill: lightgreen;
        }

        .fruit {
            fill: lightcoral;
        }

        body, html {
            margin: 0;
            padding: 0;
            width: 100%;
            height: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
            overflow: hidden;
        }

        svg {
            width: 90vw;
            height: 90vh;
            display: block;
            margin: auto;
        }

        #returnMain {
            position: absolute;
            top: 20px;
            left: 20px;
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <button id="returnMain" onclick="window.location.href='index.html';">Return to Main</button>
    <svg id="chart"></svg>
    <script>
        const urlParams = new URLSearchParams(window.location.search);
        const squareClass = urlParams.get('class') || 'root';
        const parentText = urlParams.get('parent') || 'Center';

        const svg = d3.select("#chart");
        const width = window.innerWidth * 0.9;
        const height = window.innerHeight * 0.9;
        const centerX = width / 2;
        const centerY = height / 2;
        const centerSquareSize = Math.min(width, height) / 2;
        const smallSquareSize = centerSquareSize / 2;
        const smallestSquareSize = smallSquareSize / 2;
        const tinySquareSize = smallestSquareSize / 2;

        svg.attr("viewBox", `0 0 ${width} ${height}`).attr("preserveAspectRatio", "xMidYMid meet");

        function drawSquare(
            x,
            y,
            size,
            color,
            className,
            depth,
            parentText,
        ) {
            const rect = svg
                .append("rect")
                .attr("x", x - size / 2)
                .attr("y", y - size / 2)
                .attr("width", size)
                .attr("height", size)
                .attr("class", `square ${className}`)
                .attr("fill", color)
                .on("click", function () {
                    window.location.href = `form_page.html?class=${className}&parent=${parentText}&depth=${depth}`;
                });

            svg.append("text")
                .attr("x", x)
                .attr("y", y)
                .attr("dy", "0.35em")
                .attr("text-anchor", "middle")
                .attr("font-size", size / 5)
                .attr("pointer-events", "none")
                .text(className);
        }

        drawSquare(
            centerX,
            centerY,
            centerSquareSize,
            "lightblue",
            squareClass,
            1,
            parentText,
        );

        const corners = [
            [
                centerX - centerSquareSize / 2,
                centerY - centerSquareSize / 2,
            ],
            [
                centerX + centerSquareSize / 2,
                centerY - centerSquareSize / 2,
            ],
            [
                centerX - centerSquareSize / 2,
                centerY + centerSquareSize / 2,
            ],
            [
                centerX + centerSquareSize / 2,
                centerY + centerSquareSize / 2,
            ],
        ];

        function drawSquares(corners, size, depth, className, parentText) {
            if (depth > 1) return;

            const colors = {
                "root": "lightblue",
                "branch": "lightgray",
                "leaf": "lightgreen",
                "fruit": "lightcoral"
            };

            corners.forEach(([x, y], index) => {
                let currentClassName = className;
                if (depth === 0) {
                    currentClassName = "branch";
                } else if (depth === 1) {
                    currentClassName = "leaf";
                } else if (depth === 2) {
                    currentClassName = "fruit";
                }

                drawSquare(
                    x,
                    y,
                    size,
                    colors[currentClassName] || "",
                    currentClassName || "",
                    depth,
                    parentText,
                );

                if (size > tinySquareSize) {
                    const nextSize = size / 2;
                    const nextCorners = [
                        [x - size / 2, y - size / 2],
                        [x + size / 2, y - size / 2],
                        [x - size / 2, y + size / 2],
                        [x + size / 2, y + size / 2],
                    ];

                    requestAnimationFrame(() => {
                        drawSquares(
                            nextCorners,
                            nextSize,
                            depth + 1,
                            currentClassName || "",
                            `${parentText}_${index + 1}`,
                        );
                    });
                }
            });
        }

        drawSquares(corners, smallSquareSize, 0, squareClass, parentText);

    </script>
</body>
</html>
```

>> 3 scaled_view.html and scoped_view.html

```
<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Scaled View</title>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
        .square {
            stroke: black;
            stroke-width: 2px;
            cursor: pointer;
        }

        .root {
            fill: lightblue;
        }

        .branch {
            fill: lightgray;
        }

        .leaf {
            fill: lightgreen;
        }

        .fruit {
            fill: lightcoral;
        }

        body, html {
            margin: 0;
            padding: 0;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            align-items: center;
            overflow: hidden;
        }

        svg {
            width: 90vw;
            height: 90vh;
            display: block;
            margin: auto;
        }

        .back-button {
            margin: 10px;
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.4);
            justify-content: center;
            align-items: center;
        }

        .modal-content {
            background-color: #fefefe;
            margin: auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 400px;
            text-align: center;
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

        .close:hover, .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

        .modal-button {
            padding: 10px 20px;
            margin: 10px;
            font-size: 16px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <button class="back-button" onclick="window.location.href='index.html'">Back to Main View</button>
    <svg id="chart"></svg>

    <!-- The Modal -->
    <div id="myModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <p id="modal-text">Edit Label:</p>
            <input type="text" id="label-input" />
            <button id="save-label" class="modal-button">Save</button>
            <button id="cancel" class="modal-button">Cancel</button>
            <br>
            <button id="view-scale" class="modal-button">Scaled View</button>
            <button id="view-scope" class="modal-button">Scoped View</button>
        </div>
    </div>

    <script>
        const svg = d3.select("#chart");
        const width = window.innerWidth * 0.9;
        const height = window.innerHeight * 0.9;
        const centerX = width / 2;
        const centerY = height / 2;
        const centerSquareSize = Math.min(width, height) / 4;
        const smallSquareSize = centerSquareSize / 2;
        const smallestSquareSize = smallSquareSize / 2;
        const tinySquareSize = smallestSquareSize / 2;

        svg.attr("viewBox", `0 0 ${width} ${height}`).attr("preserveAspectRatio", "xMidYMid meet");

        const modal = document.getElementById("myModal");
        const modalText = document.getElementById("modal-text");
        const btnClose = document.getElementsByClassName("close")[0];
        const btnSaveLabel = document.getElementById("save-label");
        const btnViewScale = document.getElementById("view-scale");
        const btnViewScope = document.getElementById("view-scope");
        const btnCancel = document.getElementById("cancel");
        const labelInput = document.getElementById("label-input");
        let currentUrl = "";
        let currentTextElement = null;
        let currentClassName = "";

        function openModal(url, className, textElement) {
            modal.style.display = "flex";
            currentUrl = url;
            currentTextElement = textElement;
            currentClassName = className;
            labelInput.value = textElement.textContent;
        }

        btnClose.onclick = function () {
            modal.style.display = "none";
        };

        window.onclick = function (event) {
            if (event.target === modal) {
                modal.style.display = "none";
            }
        };

        btnSaveLabel.onclick = function () {
            if (currentTextElement) {
                currentTextElement.textContent = labelInput.value;
            }
            modal.style.display = "none";
        };

        btnViewScale.onclick = function () {
            const newUrl = `scaled_view.html?root=${currentClassName}`;
            window.location.href = newUrl;
        };

        btnViewScope.onclick = function () {
            const newUrl = `scoped_view.html?root=${currentClassName}`;
            window.location.href = newUrl;
        };

        btnCancel.onclick = function () {
            modal.style.display = "none";
        };

        function debounce(func, wait) {
            let timeout;
            return function (...args) {
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(this, args), wait);
            };
        }

        function drawSquare(x, y, size, color, className, depth) {
            const rect = svg.append("rect")
                .attr("x", x - size / 2)
                .attr("y", y - size / 2)
                .attr("width", size)
                .attr("height", size)
                .attr("class", `square ${className}`)
                .attr("fill", color)
                .on("click", debounce(function () {
                    const url = window.location.href;
                    const textElement = d3.select(this.nextSibling);
                    openModal(url, className, textElement.node());
                }, 200));

            svg.append("text")
                .attr("x", x)
                .attr("y", y)
                .attr("dy", "0.35em")
                .attr("text-anchor", "middle")
                .attr("font-size", size / 5)
                .attr("pointer-events", "none")
                .text(className.charAt(0).toUpperCase() + className.slice(1));
        }

        const urlParams = new URLSearchParams(window.location.search);
        const rootClass = urlParams.get('root') || 'root';

        function drawScale() {
            if (rootClass === 'leaf') {
                drawSquare(centerX, centerY, centerSquareSize, "lightgreen", "leaf", 2);
                drawSquare(centerX, centerY - centerSquareSize * 1.5, smallSquareSize, "lightgray", "branch", 1);
            } else if (rootClass === 'branch') {
                drawSquare(centerX, centerY, centerSquareSize, "lightgray", "branch", 1);
                drawSquare(centerX, centerY - centerSquareSize * 1.5, smallSquareSize, "lightblue", "root", 0);
            } else if (rootClass === 'fruit') {
                drawSquare(centerX, centerY, centerSquareSize, "lightcoral", "fruit", 3);
                drawSquare(centerX, centerY - centerSquareSize * 1.5, smallSquareSize, "lightgreen", "leaf", 2);
            } else {
                drawSquare(centerX, centerY, centerSquareSize, "lightblue", "root", 0);
                drawSquare(centerX - centerSquareSize / 2, centerY - centerSquareSize / 2, smallSquareSize, "lightgray", "branch1", 1);
                drawSquare(centerX + centerSquareSize / 2, centerY - centerSquareSize / 2, smallSquareSize, "lightgray", "branch2", 1);
                drawSquare(centerX - centerSquareSize / 2, centerY + centerSquareSize / 2, smallSquareSize, "lightgray", "branch3", 1);
                drawSquare(centerX + centerSquareSize / 2, centerY + centerSquareSize / 2, smallSquareSize, "lightgray", "branch4", 1);
            }
        }

        drawScale();
    </script>
</body>
</html>

<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Scoped View</title>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
        .square {
            stroke: black;
            stroke-width: 2px;
            cursor: pointer;
        }

        .root {
            fill: lightblue;
        }

        .branch {
            fill: lightgray;
        }

        .leaf {
            fill: lightgreen;
        }

        .fruit {
            fill: lightcoral;
        }

        body, html {
            margin: 0;
            padding: 0;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            align-items: center;
            overflow: hidden;
        }

        svg {
            width: 90vw;
            height: 90vh;
            display: block;
            margin: auto;
        }

        .back-button {
            margin: 10px;
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
        }

        /* Modal styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.4);
            justify-content: center;
            align-items: center;
        }

        .modal-content {
            background-color: #fefefe;
            margin: auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 400px;
            text-align: center;
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

        .close:hover, .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

        .modal-button {
            padding: 10px 20px;
            margin: 10px;
            font-size: 16px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <button class="back-button" onclick="window.location.href='index.html'">Back to Main View</button>
    <svg id="chart"></svg>

    <!-- The Modal -->
    <div id="myModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <p id="modal-text">Edit Label:</p>
            <input type="text" id="label-input" />
            <button id="save-label" class="modal-button">Save</button>
            <button id="cancel" class="modal-button">Cancel</button>
            <br>
            <button id="view-scale" class="modal-button">Scaled View</button>
            <button id="view-scope" class="modal-button">Scoped View</button>
        </div>
    </div>

    <script>
        const svg = d3.select("#chart");
        const width = window.innerWidth * 0.9;
        const height = window.innerHeight * 0.9;
        const centerX = width / 2;
        const centerY = height / 2;
        const centerSquareSize = Math.min(width, height) / 2;
        const smallSquareSize = centerSquareSize / 2;

        svg.attr("viewBox", `0 0 ${width} ${height}`).attr("preserveAspectRatio", "xMidYMid meet");

        const modal = document.getElementById("myModal");
        const modalText = document.getElementById("modal-text");
        const btnClose = document.getElementsByClassName("close")[0];
        const btnSaveLabel = document.getElementById("save-label");
        const btnViewScale = document.getElementById("view-scale");
        const btnViewScope = document.getElementById("view-scope");
        const btnCancel = document.getElementById("cancel");
        const labelInput = document.getElementById("label-input");
        let currentUrl = "";
        let currentTextElement = null;
        let currentClassName = "";

        function openModal(url, className, textElement) {
            modal.style.display = "flex";
            currentUrl = url;
            currentTextElement = textElement;
            currentClassName = className;
            labelInput.value = textElement.textContent;
        }

        btnViewScale.onclick = function () {
            const newUrl = `scaled_view.html?root=${currentClassName}&name=${labelInput.value}`;
            window.location.href = newUrl;
        };

        btnViewScope.onclick = function () {
            const newUrl = `scoped_view.html?root=${currentClassName}&name=${labelInput.value}`;
            window.location.href = newUrl;
        };

        btnClose.onclick = function () {
            modal.style.display = "none";
        };

        window.onclick = function (event) {
            if (event.target === modal) {
                modal.style.display = "none";
            }
        };

        btnSaveLabel.onclick = function () {
            if (currentTextElement) {
                currentTextElement.textContent = labelInput.value;
            }
            modal.style.display = "none";
        };

        btnCancel.onclick = function () {
            modal.style.display = "none";
        };

        function debounce(func, wait) {
            let timeout;
            return function(...args) {
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(this, args), wait);
            };
        }

        function drawSquare(x, y, size, color, className) {
            const rect = svg
                .append("rect")
                .attr("x", x - size / 2)
                .attr("y", y - size / 2)
                .attr("width", size)
                .attr("height", size)
                .attr("class", `square ${className}`)
                .attr("fill", color)
                .on("click", debounce(function () {
                    const url = window.location.href;
                    const textElement = d3.select(this.nextSibling);
                    openModal(url, className, textElement.node());
                }, 200));

            svg.append("text")
                .attr("x", x)
                .attr("y", y)
                .attr("dy", "0.35em")
                .attr("text-anchor", "middle")
                .attr("font-size", size / 5)
                .attr("pointer-events", "none")
                .text(className);
        }

        const urlParams = new URLSearchParams(window.location.search);
        const rootClass = urlParams.get('root') || 'branch';

        function drawScope() {
            if (rootClass === 'branch') {
                drawSquare(centerX, centerY, centerSquareSize, "lightgray", "branch");
                drawSquare(centerX - centerSquareSize / 2, centerY - centerSquareSize / 2, smallSquareSize, "lightgreen", "leaf1");
                drawSquare(centerX + centerSquareSize / 2, centerY - centerSquareSize / 2, smallSquareSize, "lightgreen", "leaf2");
                drawSquare(centerX - centerSquareSize / 2, centerY + centerSquareSize / 2, smallSquareSize, "lightgreen", "leaf3");
                drawSquare(centerX + centerSquareSize / 2, centerY + centerSquareSize / 2, smallSquareSize, "lightgreen", "leaf4");
            } else if (rootClass === 'leaf') {
                drawSquare(centerX, centerY, centerSquareSize, "lightgreen", "leaf");
                drawSquare(centerX - centerSquareSize / 2, centerY - centerSquareSize / 2, smallSquareSize, "lightcoral", "fruit1");
                drawSquare(centerX + centerSquareSize / 2, centerY - centerSquareSize / 2, smallSquareSize, "lightcoral", "fruit2");
                drawSquare(centerX - centerSquareSize / 2, centerY + centerSquareSize / 2, smallSquareSize, "lightcoral", "fruit3");
                drawSquare(centerX + centerSquareSize / 2, centerY + centerSquareSize / 2, smallSquareSize, "lightcoral", "fruit4");
            }
        }

        drawScope();
    </script>
</body>
</html>

```
>> 4 script.js

```
(function () {
  // script.js
  let squareData = {}; // This will be populated with data from the server

  const svg = d3
    .select("#chart")
    .append("svg")
    .attr("width", "100%")
    .attr("height", 500)
    .attr("viewBox", `0 0 ${window.innerWidth * 0.9} ${window.innerHeight * 0.9}`)
    .attr("preserveAspectRatio", "xMidYMid meet");

  const modal = document.getElementById("myModal");
  const modalText = document.getElementById("modal-text");
  const btnClose = document.getElementsByClassName("close")[0];
  const btnSaveLabel = document.getElementById("save-label");
  const btnViewScale = document.getElementById("view-scale");
  const btnViewScope = document.getElementById("view-scope");
  const btnInclude = document.getElementById("include");
  const btnCancel = document.getElementById("cancel");
  const labelInput = document.getElementById("label-input");
  let currentSquare = null;
  
  btnClose.onclick = () => {
    modal.style.display = "none";
  };
  btnCancel.onclick = () => {
    modal.style.display = "none";
  };
  window.onclick = (event) => {
    if (event.target === modal) {
      modal.style.display = "none";
    }
  };

  // Utility Functions
  function debounce(func, wait) {
    let timeout;
    return function (...args) {
      clearTimeout(timeout);
      timeout = setTimeout(() => func.apply(this, args), wait);
    };
  }

  function getColor(className) {
    const colors = {
      root: "lightblue",
      branch: "lightgray",
      leaf: "lightgreen",
      fruit: "lightcoral"
    };
    return colors[className] || "lightgrey";
  }

  function filterSquares(data, className) {
    const filterRecursive = (data) => {
      if (data.class === className) return data;
      if (data.children) {
        data.children = data.children.map(filterRecursive).filter(Boolean);
        return data.children.length ? data : null;
      }
      return null;
    };
    return filterRecursive(data);
  }

  // Main Visualization Functions
  function drawSquare(svg, square, x, y, size, color, depth) {
    if (!square || !square.class) {
      console.error("Invalid square data:", square);
      return;
    }

    const iconClass = {
      root: "fa-home",
      branch: "fa-tree",
      leaf: "fa-leaf",
      fruit: "fa-apple-alt"
    };

    svg
      .append("rect")
      .attr("x", x)
      .attr("y", y)
      .attr("width", size)
      .attr("height", size)
      .attr("fill", color)
      .attr("opacity", square.included ? 1 : 0.3)
      .attr("rx", 4)
      .attr("ry", 4)
      .on("click", () => {
        currentSquare = square;
        openModal(square);
      });

    svg
      .append("text")
      .attr("x", x + size / 4)
      .attr("y", y + size / 2 + 5)
      .attr("font-family", "Font Awesome 5 Free")
      .attr("class", `fa ${iconClass[square.class]}`)
      .attr("font-size", "24px")
      .attr("fill", "#333");

    if (square.children) {
      const childSize = size / 2;
      const childSpacing = size / 3;
      let childX = x + size / 2 - (square.children.length * (childSize + childSpacing)) / 2;
      let childY = y + size + childSpacing;

      for (const child of square.children) {
        drawSquare(
          svg,
          child,
          childX,
          childY,
          childSize,
          getColor(child.class),
          depth + 1
        );
        childX += childSize + childSpacing;
      }
    }
  }

  function initializeVisualization(data) {
    if (!data || !data.class) {
      console.error("Invalid root data:", data);
      return;
    }

    const centerX = window.innerWidth * 0.45;
    const centerY = window.innerHeight * 0.45;
    const centerSquareSize = Math.min(window.innerWidth, window.innerHeight) / 2;
    drawSquare(
      svg,
      data,
      centerX,
      centerY,
      centerSquareSize,
      getColor(data.class),
      data.depth
    );
  }

  // Modal Functions
  function openModal(square) {
    modal.style.display = "flex";
    labelInput.value = square.title;
    modalText.textContent = `Edit Square: ${square.title}`;
  }

  btnSaveLabel.onclick = async () => {
    if (currentSquare) {
      currentSquare.title = labelInput.value;
      try {
        const response = await fetch(`/squares/${currentSquare.id}`, {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(currentSquare)
        });
        if (!response.ok) throw new Error("Network response was not ok");
        const data = await response.json();
        console.log("Success:", data);
        closeModal();
        const fetchResponse = await fetch("/squares");
        const fetchData = await fetchResponse.json();
        svg.selectAll("*").remove(); // Clear previous svg
        initializeVisualization(fetchData);
      } catch (error) {
        console.error("Error:", error);
      }
    }
    modal.style.display = "none";
  };

  btnViewScope.onclick = () => {
    const selectedClass = prompt("Enter class to filter (e.g., leaf, fruit):");
    const filteredData = filterSquares(squareData, selectedClass);
    svg.selectAll("*").remove(); // Clear previous svg
    initializeVisualization(filteredData);
  };

  btnViewScale.onclick = () => {
    const zoomScale = 2;
    const svg = d3.select("svg");
    const translateX = svg.attr("width") / 2;
    const translateY = svg.attr("height") / 2;
    svg
      .transition()
      .duration(300)
      .attr(
        "transform",
        `translate(${translateX}, ${translateY}) scale(${zoomScale})`
      );
  };

  btnInclude.onclick = () => {
    currentSquare.included = !currentSquare.included;
    initializeVisualization(squareData); // Re-render the visualization
  };

  // Load and Save Data
  async function loadData() {
    try {
      const response = await fetch('cbetxkdyhwsb.us-east-1.rds.amazonaws.com');
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      const data = await response.json();

      if (!data || data.length === 0) {
        console.error("No data received from the server.");
        return;
      }

      squareData = data[0]; // Assuming the first object is the root square
      console.log("Data loaded:", squareData);

      initializeVisualization(squareData); // Initialize visualization with the fetched data
    } catch (error) {
      console.error('Error fetching data:', error);
      squareData = {}; // Fallback to empty data if fetch fails
    }
  }

  function saveData() {
    if (squareData) {
      localStorage.setItem("squareData", JSON.stringify(squareData));
    } else {
      console.error("No data to save");
    }
  }

  window.addEventListener("beforeunload", saveData);
  window.addEventListener("load", loadData);

  // Adjust fruit opacity on leaf hover
  function adjustFruitOpacityOnLeafHover() {
    const leafSquares = document.querySelectorAll(".leaf");
    const fruitSquares = document.querySelectorAll(".fruit");

    leafSquares.forEach((leaf) => {
      leaf.addEventListener("mouseover", () => {
        fruitSquares.forEach((fruit) => {
          fruit.style.opacity = "1";
        });
      });
      leaf.addEventListener("mouseout", () => {
        fruitSquares.forEach((fruit) => {
          fruit.style.opacity = "0.3";
        });
      });
    });
  }

  document.addEventListener("DOMContentLoaded", adjustFruitOpacityOnLeafHover);
})();
```
